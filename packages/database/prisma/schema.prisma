datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum WorkspaceMemberRole {
  Owner
  Manager
  Contributor
}

enum Theme {
  Light
  Dark
  System
}

// Account, User, Session, and VerificationToken based on: https://authjs.dev/reference/adapter/prisma
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  customerId    String?   @unique // Stripe
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts   Account[]
  sessions   Session[]
  workspaces WorkspaceMember[]
  comments   Comment[]
  votes      Vote[]
  posts      Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Indexes
  @@unique([identifier, token])
}

model Workspace {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  theme      Theme    @default(System)
  logo       String?
  brandColor String?
  domain     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  members      WorkspaceMember[]
  subscription Subscription?
  boards       Board[]
  tags         Tag[]
  posts        Post[]
  statuses     Status[]
}

model WorkspaceMember {
  role WorkspaceMemberRole @default(Contributor)

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  // Indexes
  @@id([userId, workspaceId])
}

model Subscription {
  id                 String  @id @unique
  status             String
  productId          String
  currentPeriodStart Int
  currentPeriodEnd   Int
  cancelAtPeriodEnd  Boolean @default(false)

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @unique
}

model Board {
  id        String   @id @default(cuid())
  name      String
  slug      String
  order     Int      @default(99)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  posts       Post[]

  // Indexes
  @@unique([workspaceId, slug])
}

model Status {
  id        String   @id @default(cuid())
  name      String
  color     String
  order     Int      @default(99)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  posts       Post[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String
  order     Int      @default(99)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  posts       Post[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author      User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId    String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     String
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    String
  tags        Tag[]
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isPinned  Boolean  @default(false)
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  parent   Comment?  @relation("CommentChildren", fields: [parentId], references: [id], onDelete: SetNull)
  parentId String?
  children Comment[] @relation("CommentChildren")
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  // Indexes
  @@unique([authorId, postId])
}
